# tickers.py
from telebot import types
from datetime import datetime, timedelta
from tradingview_ta import TA_Handler, Interval, Exchange
from apscheduler.schedulers.background import BackgroundScheduler
from config import PREFERRED_CHAT_ID, ALARM_CHAT_ID, ALARM_THEME_ID
from urllib.parse import urlparse
from decimal import Decimal, getcontext, ROUND_DOWN, InvalidOperation
import pytz
import config
import os
import db
import logging
from decimal import Decimal

logging.basicConfig(level=logging.INFO)
logging.getLogger('apscheduler').setLevel(logging.DEBUG)
global_bot = None

# Set the precision for Decimal
getcontext().prec = 28

last_alert_time = {}

EXCHANGES = ['BYBIT', 'BINGX', 'BINANCE', 'KRAKEN', 'COINBASE']

def manage_tickers(bot, message):
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤", callback_data="show_tickers"))
    markup.row(types.InlineKeyboardButton("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏", callback_data="active_trades"))
    markup.row(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ä", callback_data="add_ticker"),
               types.InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–∫–µ—Ä", callback_data="edit_ticker"),
               types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ä", callback_data="delete_ticker"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup, message_thread_id=config.ALARM_THEME_ID)


def initiate_add_ticker(bot, call):
    print("initiate_add_ticker called")
    markup = types.InlineKeyboardMarkup()
    bot.answer_callback_query(call.id)
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–∏–∫–µ—Ä–∞:", message_thread_id=config.ALARM_THEME_ID)
    markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_add_ticker"))
    bot.register_next_step_handler(msg, ask_for_exchange, bot, [msg.message_id])

def ask_for_exchange(message, bot, message_ids):
    ticker_name = message.text.strip().upper()
    markup = types.InlineKeyboardMarkup()
    for exchange in EXCHANGES:
        markup.add(types.InlineKeyboardButton(exchange, callback_data=f"exchange_{exchange}_{ticker_name}"))
    markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_add_ticker"))
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É:", reply_markup=markup, message_thread_id=config.ALARM_THEME_ID)
    message_ids.append(message.message_id)
    message_ids.append(msg.message_id)

def handle_exchange_selection(bot, call):
    parts = call.data.split('_', 2)
    if len(parts) < 3:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", message_thread_id=config.ALARM_THEME_ID)
        return
    _, exchange, ticker_name = parts

    bot.answer_callback_query(call.id)
    exchange, current_rate = get_current_price(ticker_name)
    if current_rate is None:
        bot.send_message(call.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–∏–∫–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –±–∏—Ä–∂—É.", message_thread_id=config.ALARM_THEME_ID)
        return
    msg = bot.send_message(call.message.chat.id, f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {ticker_name} –Ω–∞ {exchange}: {current_rate}", message_thread_id=config.ALARM_THEME_ID)
    ask_for_direction(bot, call.message, ticker_name, exchange, current_rate, [call.message.message_id, msg.message_id])

def ask_for_direction(bot, message, ticker_name, exchange, current_rate, message_ids):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("Long", callback_data=f"direction_long_{ticker_name}_{exchange}_{current_rate}"),
               types.InlineKeyboardButton("Short", callback_data=f"direction_short_{ticker_name}_{exchange}_{current_rate}"))
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏:", reply_markup=markup, message_thread_id=config.ALARM_THEME_ID)
    message_ids.append(msg.message_id)

def process_direction(bot, call):
    markup = types.InlineKeyboardMarkup()
    _, direction, ticker_name, exchange, current_rate_str = call.data.split('_')
    try:
        current_rate = float(current_rate_str)
    except ValueError:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ –≤ —á–∏—Å–ª–æ.", message_thread_id=config.ALARM_THEME_ID)
        return
    markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_add_ticker"))
    msg = bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –¥–ª—è {ticker_name} ({direction}):", reply_markup=markup, message_thread_id=config.ALARM_THEME_ID)
    bot.register_next_step_handler(call.message, process_entry_point, bot, ticker_name, exchange, direction, current_rate, [call.message.message_id, msg.message_id])

def process_entry_point(message, bot, ticker_name, exchange, direction, current_rate, message_ids):
    try:
        entry_point = Decimal(message.text)
        markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_add_ticker"))
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:", reply_markup=markup, message_thread_id=config.ALARM_THEME_ID)
        bot.register_next_step_handler(msg, process_take_profit, bot, ticker_name, exchange, direction, entry_point, current_rate, message_ids + [message.message_id, msg.message_id])
    except InvalidOperation:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞.", message_thread_id=config.ALARM_THEME_ID)
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ—Ç –∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        bot.register_next_step_handler(message, process_entry_point, bot, ticker_name, exchange, direction, current_rate, message_ids)

def process_take_profit(message, bot, ticker_name, exchange, direction, entry_point, current_rate, message_ids):
    try:
        take_profit = Decimal(message.text)
        markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_add_ticker"))
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å:", reply_markup=markup, message_thread_id=config.ALARM_THEME_ID)
        bot.register_next_step_handler(msg, process_stop_loss, bot, ticker_name, exchange, direction, entry_point, take_profit, current_rate, message_ids + [message.message_id, msg.message_id])
    except InvalidOperation:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç.", message_thread_id=config.ALARM_THEME_ID)
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ—Ç –∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        bot.register_next_step_handler(message, process_take_profit, bot, ticker_name, exchange, direction, entry_point, current_rate, message_ids)

def process_stop_loss(message, bot, ticker_name, exchange, direction, entry_point, take_profit, current_rate, message_ids):
    try:
        stop_loss = Decimal(message.text)
        markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_add_ticker"))
        msg = bot.send_message(message.chat.id, "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ç–∞–ø–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ URL:", reply_markup=markup, message_thread_id=config.ALARM_THEME_ID)
        bot.register_next_step_handler(msg, finalize_setup, bot, ticker_name, exchange, direction, entry_point, take_profit, stop_loss, current_rate, message_ids + [message.message_id, msg.message_id])
    except InvalidOperation:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å.", message_thread_id=config.ALARM_THEME_ID)
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ—Ç –∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        bot.register_next_step_handler(message, process_stop_loss, bot, ticker_name, exchange, direction, entry_point, take_profit, current_rate, message_ids)

import os
from urllib.parse import urlparse

def finalize_setup(message, bot, ticker_name, exchange, direction, entry_point, take_profit, stop_loss, current_rate, message_ids):
    setup_image_path = message.text if message.content_type == 'text' else save_photo(bot, message.photo[-1].file_id)
    leverage = 10  # –ü–ª–µ—á–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–∫–µ—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_new_ticker(ticker_name, direction, entry_point, take_profit, stop_loss, current_rate, setup_image_path)
        
        # –†–∞—Å—á—ë—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
        potential = abs(Decimal(((take_profit / entry_point - 1) * leverage * 100)))
        # potential = Decimal(((take_profit / entry_point - 1) * leverage * 100))

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–æ 8 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        formatted_current_rate = Decimal(current_rate).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)
        
        info = (
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"<b>üîñ –¢–∏–∫–µ—Ä:</b> <code>{ticker_name}</code>\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"<b>üîÑ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> <code>{direction}</code>\n"
            f"<b>üéØ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (–¢–í–•):</b> <code>{Decimal(entry_point)}</code>\n"
            f"<b>üìà –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:</b> <code>{Decimal(take_profit)}</code>\n"
            f"<b>üìâ –°—Ç–æ–ø-–ª–æ—Å—Å:</b> <code>{Decimal(stop_loss)}</code>\n"
            f"<b>üíπ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>${formatted_current_rate}</code>\n"
            # f"<b>üíπ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>${Decimal(current_rate)}</code>\n"
            f"<b>üñº –°–µ—Ç–∞–ø:</b> <code>{setup_image_path}</code>\n"
            f"<b>üöÄ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª:</b> <code>{(round(potential, 2))}%</code>\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        )
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        for msg_id in message_ids:
            bot.delete_message(message.chat.id, msg_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –Ω–∞ –¥–∏—Å–∫–µ –∏–ª–∏ URL-–∞–¥—Ä–µ—Å–æ–º
        parsed_url = urlparse(setup_image_path)
        if setup_image_path and (os.path.exists(setup_image_path) or parsed_url.scheme in ('http', 'https')):
            if os.path.exists(setup_image_path):
                with open(setup_image_path, 'rb') as photo:
                    bot.send_photo(message.chat.id, photo, caption=info, parse_mode='HTML', message_thread_id=config.ALARM_THEME_ID)
            else:
                bot.send_photo(message.chat.id, setup_image_path, caption=info, parse_mode='HTML', message_thread_id=config.ALARM_THEME_ID)
        else:
            bot.send_message(message.chat.id, info, parse_mode="HTML", message_thread_id=config.ALARM_THEME_ID)
            bot.send_message(message.chat.id, "–§–æ—Ç–æ —Å–µ—Ç–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", message_thread_id=config.ALARM_THEME_ID)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", message_thread_id=config.ALARM_THEME_ID)


def save_photo(bot, file_id):
    file_info = bot.get_file(file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    directory = 'setups'
    if not os.path.exists(directory):
        os.makedirs(directory)
    timestamp = datetime.now().strftime("%d.%m.%Y-%H-%M-%S")
    file_path = f'{directory}/{timestamp}.jpg'
    with open(file_path, 'wb') as new_file:
        new_file.write(downloaded_file)
    return file_path

def get_current_price(ticker_name):
    handler = TA_Handler(interval=Interval.INTERVAL_1_MINUTE, screener="crypto")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–∫–µ—Ä –Ω–∞ –≤—Å–µ—Ö –±–∏—Ä–∂–∞—Ö
    for exchange in EXCHANGES:
        handler.exchange = exchange
        handler.symbol = ticker_name
        try:
            analysis = handler.get_analysis()
            if analysis:
                current_rate = analysis.indicators.get("close")
                if current_rate is not None:
                    formatted_rate = Decimal(current_rate).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)
                    return exchange, formatted_rate
        except Exception as e:
            logging.error(f"Error retrieving data from TradingView for {ticker_name} on {exchange}: {str(e)}")
    
    # –ï—Å–ª–∏ —Ç–∏–∫–µ—Ä –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ "USD" –∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–∏–∫–µ—Ä —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º "USDT"
    if ticker_name.endswith("USD"):
        ticker_name_usdt = ticker_name[:-3] + "USDT"  # –ó–∞–º–µ–Ω—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å
        for exchange in EXCHANGES:
            handler.exchange = exchange
            handler.symbol = ticker_name_usdt
            try:
                analysis = handler.get_analysis()
                if analysis:
                    current_rate = analysis.indicators.get("close")
                    if current_rate is not None:
                        formatted_rate = Decimal(current_rate).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)
                        return exchange, formatted_rate
            except Exception as e:
                logging.error(f"Error retrieving data from TradingView for {ticker_name_usdt} on {exchange}: {str(e)}")
    
    return None, None


# def get_current_price(ticker_name):
#     handler = TA_Handler(interval=Interval.INTERVAL_1_MINUTE, screener="crypto")
#     for exchange in EXCHANGES:
#         handler.exchange = exchange
#         handler.symbol = ticker_name
#         try:
#             analysis = handler.get_analysis()
#             if analysis:
#                 current_rate = analysis.indicators.get("close")
#                 if current_rate is not None:
#                     return exchange, current_rate
#         except Exception as e:
#             logging.error(f"Error retrieving data from TradingView for {ticker_name} on {exchange}: {str(e)}")
#             continue
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–∞—Ä—ã —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º "USD", –∏—â–µ–º —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º "USDT"
    # if ticker_name.endswith("USD"):
    #     ticker_name_usdt = ticker_name + "T"
    #     for exchange in EXCHANGES:
    #         handler.exchange = exchange
    #         handler.symbol = ticker_name_usdt
    #         try:
    #             analysis = handler.get_analysis()
    #             if analysis:
    #                 current_rate = analysis.indicators.get("close")
    #                 if current_rate is not None:
    #                     return exchange, current_rate
    #         except Exception as e:
    #             logging.error(f"Error retrieving data from TradingView for {ticker_name_usdt} on {exchange}: {str(e)}")
    #             continue
    
    # logging.error(f"Failed to fetch data for {ticker_name} on all exchanges.")
    # return None, None

def show_ticker_list(bot, message):
    tickers = db.get_all_tickers()
    markup = types.InlineKeyboardMarkup()
    for ticker, id in tickers:
        markup.add(types.InlineKeyboardButton(ticker, callback_data=f"ticker_{id}"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä:", reply_markup=markup, message_thread_id=config.ALARM_THEME_ID)

def show_ticker_info(bot, call):
    ticker_id = call.data.split('_')[1]
    connection = db.get_db_connection()
    cursor = connection.cursor()
    try:
        cursor.execute("SELECT * FROM tickers WHERE id = %s", (ticker_id,))
        ticker = cursor.fetchone()
        if ticker:
            _, current_rate = get_current_price(ticker[1])
            leverage = 10
            potential = abs(Decimal(((ticker[3] / ticker[2] - 1) * leverage * 100)))

            info = (
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                f"<b>üîñ –¢–∏–∫–µ—Ä:</b> <code>{ticker[1]}</code>\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                f"<b>üîÑ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> <code>{ticker[8]}</code>\n"
                f"<b>üéØ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (–¢–í–•):</b> <code>{Decimal(ticker[2])}</code>\n"
                f"<b>üìà –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:</b> <code>{Decimal(ticker[3])}</code>\n"
                f"<b>üìâ –°—Ç–æ–ø-–ª–æ—Å—Å:</b> <code>{Decimal(ticker[4])}</code>\n"
                f"<b>üíπ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>${Decimal(current_rate)}</code>\n"
                f"<b>üöÄ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª:</b> <code>{round(potential, 2)}%</code>\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            )

            parsed_url = urlparse(ticker[6])
            if ticker[6] and (os.path.exists(ticker[6]) or parsed_url.scheme in ('http', 'https')):
                if os.path.exists(ticker[6]):
                    with open(ticker[6], 'rb') as photo:
                        bot.send_photo(call.message.chat.id, photo, caption=info, parse_mode='HTML', message_thread_id=config.ALARM_THEME_ID)
                else:
                    bot.send_photo(call.message.chat.id, ticker[6], caption=info, parse_mode='HTML', message_thread_id=config.ALARM_THEME_ID)
            else:
                bot.send_message(call.message.chat.id, info, parse_mode="HTML", message_thread_id=config.ALARM_THEME_ID)
                bot.send_message(call.message.chat.id, "–§–æ—Ç–æ —Å–µ—Ç–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", message_thread_id=config.ALARM_THEME_ID)
        else:
            bot.send_message(call.message.chat.id, "–¢–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", message_thread_id=config.ALARM_THEME_ID)
    except Exception as e:
        bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}", message_thread_id=config.ALARM_THEME_ID)
    finally:
        cursor.close()
        connection.close()


def delete_ticker(bot, call):
    tickers = db.get_all_tickers()
    markup = types.InlineKeyboardMarkup()
    for ticker in tickers:
        markup.add(types.InlineKeyboardButton(ticker[0], callback_data=f"del_{ticker[1]}"))
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup, message_thread_id=config.ALARM_THEME_ID)

def confirm_delete_ticker(bot, call):
    parts = call.data.split("_")
    if len(parts) < 2:
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.", message_thread_id=config.ALARM_THEME_ID)
        return
    ticker_id = int(parts[1])
    ticker_name = db.get_ticker_name(ticker_id)
    setup_image_path = db.get_setup_image_path(ticker_id)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db.delete_ticker(ticker_id)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if setup_image_path and os.path.exists(setup_image_path):
        os.remove(setup_image_path)
    
    bot.answer_callback_query(call.id, "–¢–∏–∫–µ—Ä —É–¥–∞–ª–µ–Ω!")
    bot.send_message(call.message.chat.id, f"–¢–∏–∫–µ—Ä {ticker_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", message_thread_id=config.ALARM_THEME_ID)

# def confirm_delete_ticker(bot, call):
#     parts = call.data.split("_")
#     if len(parts) < 2:
#         bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.", message_thread_id=config.ALARM_THEME_ID)
#         return
#     ticker_id = int(parts[1])
#     setup_image_path = db.get_setup_image_path(ticker_id)
    
#     # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
#     db.delete_ticker(ticker_id)
    
#     # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
#     if setup_image_path and os.path.exists(setup_image_path):
#         os.remove(setup_image_path)
    
#     bot.answer_callback_query(call.id, "–¢–∏–∫–µ—Ä —É–¥–∞–ª–µ–Ω!")
#     bot.send_message(call.message.chat.id, "–¢–∏–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", message_thread_id=config.ALARM_THEME_ID)

def edit_ticker(bot, call):
    tickers = db.get_all_tickers()
    markup = types.InlineKeyboardMarkup()
    for ticker in tickers:
        markup.add(types.InlineKeyboardButton(ticker[0], callback_data=f"edit_{ticker[1]}"))
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup, message_thread_id=config.ALARM_THEME_ID)

def select_field_to_edit(bot, call):
    ticker_id = call.data.split("_")[1]
    markup = types.InlineKeyboardMarkup()
    fields = ["entry_point", "take_profit", "stop_loss", "current_rate", "active", "direction"]
    for field in fields:
        markup.add(types.InlineKeyboardButton(field.replace("_", " ").title(), callback_data=f"editfield_{ticker_id}_{field}"))
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup, message_thread_id=config.ALARM_THEME_ID)

def get_new_value(bot, call):
    parts = call.data.split('_', 2)
    if len(parts) < 3:
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.", message_thread_id=config.ALARM_THEME_ID)
        return
    _, ticker_id, field = parts
    msg = f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field.replace('_', ' ').title()}:"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_edit"))
    bot.send_message(call.message.chat.id, msg, reply_markup=markup, message_thread_id=config.ALARM_THEME_ID)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, lambda message: update_ticker_value(bot, message, ticker_id, field))

def update_ticker_value(bot, message, ticker_id, field):
    new_value = message.text
    try:
        db.update_ticker_field(ticker_id, field, new_value)
        bot.send_message(message.chat.id, f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field.replace('_', ' ').title()} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", message_thread_id=config.ALARM_THEME_ID)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", message_thread_id=config.ALARM_THEME_ID)

def start_monitoring(bot):
    global global_bot
    global_bot = bot
    moscow_tz = pytz.timezone('Europe/Moscow')
    scheduler = BackgroundScheduler(timezone=moscow_tz)
    scheduler.add_job(monitor_prices, 'interval', seconds=1)
    scheduler.start()

def monitor_prices():
    logging.info("–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω...")
    connection = db.get_db_connection()
    cursor = connection.cursor()
    try:
        cursor.execute("SELECT id, ticker, entry_point, take_profit, stop_loss, delay_until FROM tickers WHERE active=1")
        tickers = cursor.fetchall()
        for ticker in tickers:
            ticker_id, ticker_name, entry_point, take_profit, stop_loss, delay_until = ticker
            
            if delay_until and datetime.now() < delay_until:
                continue
            
            exchange, current_rate_str = get_current_price(ticker_name)
            if exchange is None or current_rate_str is None:
                logging.error(f"Failed to fetch current rate for {ticker_name}")
                continue
            try:
                current_rate = float(current_rate_str)
            except ValueError:
                logging.error(f"Invalid current rate value: {current_rate_str}")
                continue

            logging.debug(f"Processing ticker {ticker_name} on {exchange}: current_rate={current_rate}")
            check_price_thresholds(ticker_name, exchange, entry_point, take_profit, stop_loss, current_rate, ticker_id)
    finally:
        cursor.close()
        connection.close()

# def monitor_prices():
#     logging.info("–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω...")
#     connection = db.get_db_connection()
#     cursor = connection.cursor()
#     try:
#         cursor.execute("SELECT id, ticker, entry_point, take_profit, stop_loss, delay_until FROM tickers WHERE active=1")
#         tickers = cursor.fetchall()
#         for ticker in tickers:
#             ticker_id, ticker_name, entry_point, take_profit, stop_loss, delay_until = ticker
            
#             if delay_until and datetime.now() < delay_until:
#                 continue
            
#             exchange, current_rate = get_current_price(ticker_name)
#             if exchange is None or current_rate is None:
#                 logging.error(f"Failed to fetch current rate for {ticker_name}")
#                 continue
#             logging.debug(f"Processing ticker {ticker_name} on {exchange}: current_rate={current_rate}")
#             check_price_thresholds(ticker_name, exchange, entry_point, take_profit, stop_loss, current_rate, ticker_id)
#     finally:
#         cursor.close()
#         connection.close()

def check_price_thresholds(ticker_name, exchange, entry_point, take_profit, stop_loss, current_rate, ticker_id):
    connection = db.get_db_connection()
    cursor = connection.cursor()
    try:
        cursor.execute("SELECT entry_confirmed, delay_until FROM tickers WHERE id = %s", (ticker_id,))
        entry_confirmed, delay_until = cursor.fetchone()

        entry_point = Decimal(entry_point)
        take_profit = Decimal(take_profit)
        stop_loss = Decimal(stop_loss)
        current_rate = Decimal(current_rate)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∏–∫–µ—Ä–∞
        if delay_until and datetime.now() < delay_until:
            logging.debug(f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–∏–∫–µ—Ä–∞ {ticker_name} –æ—Ç–ª–æ–∂–µ–Ω–∞ –¥–æ {delay_until}")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–∞ –≤ —Ç–∏–∫–µ—Ä
        if not entry_confirmed:
            if entry_point == Decimal('0'):
                logging.error(f"–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è {ticker_name} —Ä–∞–≤–Ω–∞ –Ω—É–ª—é, –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞...")
                return
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ —Ç–æ—á–∫–µ –≤—Ö–æ–¥–∞
            if abs(current_rate - entry_point) / entry_point < Decimal('0.015'):
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥", callback_data=f"confirm_entry_{ticker_id}"))
                markup.add(types.InlineKeyboardButton("–ó–∞–≥–ª—É—à–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data=f"mute_entry_{ticker_id}"))
                message_text = f"üö® {ticker_name} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1.5% –æ—Ç —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞: {entry_point} (—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: `{current_rate}`)."
                send_alert(ticker_id, message_text, reply_markup=markup, parse_mode="Markdown")
                return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        if abs(current_rate - take_profit) / take_profit < Decimal('0.002'):  # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            status = "–ü—Ä–∏–±—ã–ª—å"
            logging.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –¥–ª—è {ticker_name}")
            message_text = f"üéâ {ticker_name} –Ω–∞ –±–∏—Ä–∂–µ {exchange} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: ${take_profit}."
            print(f"\n\n\n\n!!!!!!!!!!!!!!!!–†–ê–ë–û–¢–ê–ï–¢ –¢–ü!!!!!!!!!!!!!!!!!!!!!!\nüéâ {ticker_name} –Ω–∞ {exchange} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: {take_profit}.\n\n\n\n")
            send_alert(ticker_id, message_text, parse_mode="Markdown")
            db.archive_and_remove_ticker(ticker_id, current_rate, status)

        elif abs(current_rate - stop_loss) / stop_loss < Decimal('0.002'):  # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å
            status = "–£–±—ã—Ç–æ–∫"
            logging.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –¥–ª—è {ticker_name}")
            print(f"\n\n\n\n!!!!!!!!!!!!!!!!–†–ê–ë–û–¢–ê–ï–¢ –°–õ!!!!!!!!!!!!!!!!!!!!!!\nüõë {ticker_name} –Ω–∞ {exchange} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {stop_loss}.\n\n\n\n")
            message_text = f"üõë {ticker_name} –Ω–∞ –±–∏—Ä–∂–µ {exchange} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: ${stop_loss}."
            send_alert(ticker_id, message_text, parse_mode="Markdown")
            db.archive_and_remove_ticker(ticker_id, current_rate, status)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ check_price_thresholds: {e}")
    finally:
        # –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        cursor.close()
        connection.close()

# def check_price_thresholds(ticker_name, exchange, entry_point, take_profit, stop_loss, current_rate, ticker_id):
#     connection = db.get_db_connection()
#     cursor = connection.cursor()
#     try:
#         cursor.execute("SELECT entry_confirmed, delay_until FROM tickers WHERE id = %s", (ticker_id,))
#         entry_confirmed, delay_until = cursor.fetchone()

#         # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ Decimal
#         entry_point = Decimal(entry_point)
#         take_profit = Decimal(take_profit)
#         stop_loss = Decimal(stop_loss)
#         current_rate = Decimal(current_rate)
        
#         if delay_until and datetime.now() < delay_until:
#             logging.debug(f"Ticker {ticker_name} is delayed until {delay_until}")
#             return

#         status = ""
#         logging.debug(f"Ticker {ticker_name} - current_rate: {current_rate}, take_profit: {take_profit}, stop_loss: {stop_loss}, entry_confirmed: {entry_confirmed}")

#         if not entry_confirmed:
#             if entry_point == Decimal('0'):
#                 logging.error(f"–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è {ticker_name} —Ä–∞–≤–Ω–∞ –Ω—É–ª—é, –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞...")
#                 return
#             if abs(current_rate - entry_point) / entry_point < Decimal('0.015'):
#                 markup = types.InlineKeyboardMarkup()
#                 markup.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥", callback_data=f"confirm_entry_{ticker_id}"))
#                 markup.add(types.InlineKeyboardButton("–ó–∞–≥–ª—É—à–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data=f"mute_entry_{ticker_id}"))
#                 message_text = f"üö® {ticker_name} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1.5% –æ—Ç —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞: {entry_point} (—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: `{format_decimal(current_rate)}`)."
#                 send_alert(ticker_id, message_text, reply_markup=markup, parse_mode="Markdown")
#                 return
#             if not entry_confirmed:
#                 if abs(current_rate - entry_point) / entry_point < Decimal('0.002'):
#                     message_text = f"‚úÖ {ticker_name} –¥–æ—Å—Ç–∏–≥ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –Ω–∞ {exchange}.\n"
#                     send_alert(ticker_id, message_text, reply_markup=markup)
        
#         if abs(current_rate - take_profit) / take_profit < Decimal('0.002'):
#             status = "–ü—Ä–∏–±—ã–ª—å"
#             logging.debug(f"Sending take profit alert for {ticker_name}")
#             message_text = f"üéâ {ticker_name} –Ω–∞ {exchange} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: $`{take_profit}.`"
#             send_alert(ticker_id, message_text, parse_mode="Markdown")
#             db.archive_and_remove_ticker(ticker_id, current_rate, status)

#         elif abs(current_rate - stop_loss) / stop_loss < Decimal('0.002'):
#             status = "—É–±—ã—Ç–æ–∫"
#             logging.debug(f"Sending stop loss alert for {ticker_name}")
#             message_text = f"üõë {ticker_name} –Ω–∞ {exchange} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: `{stop_loss}`."
#             send_alert(ticker_id, message_text, parse_mode="Markdown")
#             db.archive_and_remove_ticker(ticker_id, current_rate, status)

#     except Exception as e:
#         logging.error(f"Error in check_price_thresholds: {e}")
#     finally:
#         cursor.close()
#         connection.close()

# def check_price_thresholds(ticker_name, exchange, entry_point, take_profit, stop_loss, current_rate, ticker_id):
#     connection = db.get_db_connection()
#     cursor = connection.cursor()
#     try:
#         cursor.execute("SELECT entry_confirmed, delay_until FROM tickers WHERE id = %s", (ticker_id,))
#         entry_confirmed, delay_until = cursor.fetchone()
        
#         if delay_until and datetime.now() < delay_until:
#             logging.debug(f"Ticker {ticker_name} is delayed until {delay_until}")
#             return

#         status = ""
#         logging.debug(f"Ticker {ticker_name} - current_rate: {current_rate}, take_profit: {take_profit}, stop_loss: {stop_loss}, entry_confirmed: {entry_confirmed}")

#         if not entry_confirmed:
#             if entry_point == 0:
#                 logging.error(f"–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è {ticker_name} —Ä–∞–≤–Ω–∞ –Ω—É–ª—é, –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞...")
#                 return
#             if abs(current_rate - entry_point) / entry_point < 0.015:
#                 markup = types.InlineKeyboardMarkup()
#                 markup.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥", callback_data=f"confirm_entry_{ticker_id}"))
#                 markup.add(types.InlineKeyboardButton("–ó–∞–≥–ª—É—à–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data=f"mute_entry_{ticker_id}"))
#                 message_text = f"üö® {ticker_name} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1.5% –æ—Ç —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞: {entry_point} (—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_rate})."
#                 send_alert(ticker_id, message_text, reply_markup=markup)
#                 return
#             if not entry_confirmed:
#                 if abs(current_rate - entry_point) / entry_point < 0.002:
#                     message_text = f"‚úÖ {ticker_name} –¥–æ—Å—Ç–∏–≥ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –Ω–∞ {exchange}.\n"
#                     send_alert(ticker_id, message_text, reply_markup=markup)
        
#         if abs(current_rate - take_profit) / take_profit < 0.002:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤ 0.2% –æ—Ç —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
#             status = "–ø—Ä–∏–±—ã–ª—å"
#             logging.debug(f"Sending take profit alert for {ticker_name}")
#             print(f"\n\n\n\n!!!!!!!!!!!!!!!!–†–ê–ë–û–¢–ê–ï–¢ –¢–ü!!!!!!!!!!!!!!!!!!!!!!\nüéâ {ticker_name} –Ω–∞ {exchange} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: {take_profit}.\n\n\n\n")
#             message_text = f"üéâ {ticker_name} –Ω–∞ {exchange} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: {take_profit}.\nfrom tickers.py"
#             send_alert(ticker_id, message_text)
#             db.archive_and_remove_ticker(ticker_id, current_rate, status)
#         elif abs(current_rate - stop_loss) / stop_loss < 0.002:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤ 0.2% –æ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
#             status = "—É–±—ã—Ç–æ–∫"
#             logging.debug(f"Sending stop loss alert for {ticker_name}")
#             message_text = f"üõë {ticker_name} –Ω–∞ {exchange} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {stop_loss}.\nfrom tickers.py"
#             print(f"\n\n\n\n!!!!!!!!!!!!!!!!–†–ê–ë–û–¢–ê–ï–¢ –°–õ!!!!!!!!!!!!!!!!!!!!!!\nüõë {ticker_name} –Ω–∞ {exchange} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {stop_loss}.\n\n\n\n")
#             send_alert(ticker_id, message_text)
#             db.archive_and_remove_ticker(ticker_id, current_rate, status)
#     except Exception as e:
#         logging.error(f"Error in check_price_thresholds: {e}")
#     finally:
#         cursor.close()
#         connection.close()

# def check_price_thresholds(ticker_name, exchange, entry_point, take_profit, stop_loss, current_rate, ticker_id):
#     connection = db.get_db_connection()
#     cursor = connection.cursor()
#     try:
#         cursor.execute("SELECT entry_confirmed, delay_until FROM tickers WHERE id = %s", (ticker_id,))
#         entry_confirmed, delay_until = cursor.fetchone()
        
#         if delay_until and datetime.now() < delay_until:
#             logging.debug(f"Ticker {ticker_name} is delayed until {delay_until}")
#             return

#         # message_text = ""
#         status = ""
#         logging.debug(f"Ticker {ticker_name} - current_rate: {current_rate}, take_profit: {take_profit}, stop_loss: {stop_loss}, entry_confirmed: {entry_confirmed}")

#         if not entry_confirmed:
#             if entry_point == 0:
#                 logging.error(f"–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è {ticker_name} —Ä–∞–≤–Ω–∞ –Ω—É–ª—é, –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞...")
#                 return
#             if abs(current_rate - entry_point) / entry_point < 0.015:
#                 markup = types.InlineKeyboardMarkup()
#                 markup.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥", callback_data=f"confirm_entry_{ticker_id}"))
#                 markup.add(types.InlineKeyboardButton("–ó–∞–≥–ª—É—à–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data=f"mute_entry_{ticker_id}"))
#                 message_text = f"üö® {ticker_name} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1.5% –æ—Ç —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞: {entry_point} (—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_rate})."
#                 send_alert(ticker_id, message_text, reply_markup=markup)
#                 return
#             if not entry_confirmed:
#                 if abs(current_rate - entry_point) / entry_point < 0.002:
#                     message_text = f"‚úÖ {ticker_name} –¥–æ—Å—Ç–∏–≥ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –Ω–∞ {exchange}.\n"
#                     send_alert(ticker_id, message_text, reply_markup=markup)
#             # return
#         if abs(current_rate - take_profit) / take_profit < 0.002:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤ 0.2% –æ—Ç —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
#             message_text = f"üéâ {ticker_name} –Ω–∞ {exchange} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: {take_profit}."
#             status = "–ø—Ä–∏–±—ã–ª—å"
#             logging.debug(f"Sending take profit alert for {ticker_name}")
#             send_alert(ticker_id, f"üéâ {ticker_name} –Ω–∞ {exchange} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: {take_profit}.")
#             print(f"\n\n\n\n!!!!!!!!!!!!!!!!–†–ê–ë–û–¢–ê–ï–¢ –¢–ü!!!!!!!!!!!!!!!!!!!!!!\n\n\n\n{ticker_name} –Ω–∞ {exchange} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: {take_profit}")
#             db.archive_and_remove_ticker(ticker_id, current_rate, status)
#         elif abs(current_rate - stop_loss) / stop_loss < 0.002:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤ 0.2% –æ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
#             message_text = f"üõë {ticker_name} –Ω–∞ {exchange} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {stop_loss}."
#             print(f"\n\n\n\n!!!!!!!!!!!!!!!!–†–ê–ë–û–¢–ê–ï–¢ –°–õ!!!!!!!!!!!!!!!!!!!!!!\n\n\n\nüõë {ticker_name} –Ω–∞ {exchange} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {stop_loss}.")
#             status = "—É–±—ã—Ç–æ–∫"
#             logging.debug(f"Sending stop loss alert for {ticker_name}")
#             send_alert(ticker_id, f"üõë {ticker_name} –Ω–∞ {exchange} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {stop_loss}.")
#             db.archive_and_remove_ticker(ticker_id, current_rate, status)
#     except Exception as e:
#         logging.error(f"Error in check_price_thresholds: {e}")
#     finally:
#         cursor.close()
#         connection.close()

# def check_price_thresholds(ticker_name, exchange, entry_point, take_profit, stop_loss, current_rate, ticker_id):
#     connection = db.get_db_connection()
#     cursor = connection.cursor()
#     try:
#         cursor.execute("SELECT entry_confirmed, delay_until FROM tickers WHERE id = %s", (ticker_id,))
#         entry_confirmed, delay_until = cursor.fetchone()
        
#         if delay_until and datetime.now() < delay_until:
#             logging.debug(f"Ticker {ticker_name} is delayed until {delay_until}")
#             return

#         message_text = ""
#         status = ""
#         logging.debug(f"Ticker {ticker_name} - current_rate: {current_rate}, take_profit: {take_profit}, stop_loss: {stop_loss}, entry_confirmed: {entry_confirmed}")

#         if not entry_confirmed:
#             if entry_point == 0:
#                 logging.error(f"–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è {ticker_name} —Ä–∞–≤–Ω–∞ –Ω—É–ª—é, –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞...")
#                 return
#             if abs(current_rate - entry_point) / entry_point < 0.015:
#                 markup = types.InlineKeyboardMarkup()
#                 markup.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥", callback_data=f"confirm_entry_{ticker_id}"))
#                 markup.add(types.InlineKeyboardButton("–ó–∞–≥–ª—É—à–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data=f"mute_entry_{ticker_id}"))
#                 message_text = f"üö® {ticker_name} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1.5% –æ—Ç —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞: {entry_point} (—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_rate})."
#                 send_alert(ticker_id, message_text, reply_markup=markup)
#                 return
#             if not entry_confirmed and current_rate == entry_point:
#                 message_text = f"‚úÖ {ticker_name} –¥–æ—Å—Ç–∏–≥ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –Ω–∞ {exchange}.\n"
#                 send_alert(ticker_id, message_text, reply_markup=markup)
#             # return
#         if current_rate == take_profit:
#             message_text = f"üéâ {ticker_name} –Ω–∞ {exchange} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: {take_profit}."
#             status = "–ø—Ä–∏–±—ã–ª—å"
#             logging.debug(f"Sending take profit alert for {ticker_name}")
#             send_alert(ticker_id, message_text)
#             print("\n\n\n\n!!!!!!!!!!!!!!!!–†–ê–ë–û–¢–ê–ï–¢ –¢–ü!!!!!!!!!!!!!!!!!!!!!!\n\n\n\n")
#             db.archive_and_remove_ticker(ticker_id, current_rate, status)
#         elif current_rate == stop_loss:
#             message_text = f"üõë {ticker_name} –Ω–∞ {exchange} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {stop_loss}."
#             print("\n\n\n\n!!!!!!!!!!!!!!!!–†–ê–ë–û–¢–ê–ï–¢ –°–õ!!!!!!!!!!!!!!!!!!!!!!\n\n\n\n")
#             status = "—É–±—ã—Ç–æ–∫"
#             logging.debug(f"Sending stop loss alert for {ticker_name}")
#             send_alert(ticker_id, message_text)
#             db.archive_and_remove_ticker(ticker_id, current_rate, status)
#     except Exception as e:
#         logging.error(f"Error in check_price_thresholds: {e}")
#     finally:
#         cursor.close()
#         connection.close()

# def check_price_thresholds(ticker_name, exchange, entry_point, take_profit, stop_loss, current_rate, ticker_id):
#     connection = db.get_db_connection()
#     cursor = connection.cursor()
#     try:
#         cursor.execute("SELECT entry_confirmed, delay_until FROM tickers WHERE id = %s", (ticker_id,))
#         entry_confirmed, delay_until = cursor.fetchone()
        
#         if delay_until and datetime.now() < delay_until:
#             return

#         message_text = ""
#         status = ""
#         logging.debug(f"Ticker {ticker_name} - current_rate: {current_rate}, take_profit: {take_profit}, stop_loss: {stop_loss}, entry_confirmed: {entry_confirmed}")

#         if not entry_confirmed:
#             if entry_point == 0:
#                 logging.error(f"–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è {ticker_name} —Ä–∞–≤–Ω–∞ –Ω—É–ª—é, –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞...")
#                 return
#             if abs(current_rate - entry_point) / entry_point < 0.015:
#                 markup = types.InlineKeyboardMarkup()
#                 markup.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥", callback_data=f"confirm_entry_{ticker_id}"))
#                 markup.add(types.InlineKeyboardButton("–ó–∞–≥–ª—É—à–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data=f"mute_entry_{ticker_id}"))
#                 message_text = f"üö® {ticker_name} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1.5% –æ—Ç —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞: {entry_point} (—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_rate})."
#                 send_alert(ticker_id, message_text, reply_markup=markup)
#                 return
#             if not entry_confirmed and current_rate == entry_point:
#                 message_text = f"‚úÖ {ticker_name} –¥–æ—Å—Ç–∏–≥ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –Ω–∞ {exchange}.\n"
#                 send_alert(ticker_id, message_text, reply_markup=markup)
#             return
#         if current_rate >= take_profit:
#             message_text = f"üéâ {ticker_name} –Ω–∞ {exchange} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: {take_profit}."
#             status = "–ø—Ä–∏–±—ã–ª—å"
#             logging.debug(f"Sending take profit alert for {ticker_name}")
#             send_alert(ticker_id, message_text)
#             db.archive_and_remove_ticker(ticker_id, current_rate, status)
#         elif current_rate <= stop_loss:
#             message_text = f"üõë {ticker_name} –Ω–∞ {exchange} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {stop_loss}."
#             status = "—É–±—ã—Ç–æ–∫"
#             logging.debug(f"Sending stop loss alert for {ticker_name}")
#             send_alert(ticker_id, message_text)
#             db.archive_and_remove_ticker(ticker_id, current_rate, status)
#     finally:
#         cursor.close()
#         connection.close()

# def check_price_thresholds(ticker_name, exchange, entry_point, take_profit, stop_loss, current_rate, ticker_id):
#     connection = db.get_db_connection()
#     cursor = connection.cursor()
#     try:
#         cursor.execute("SELECT entry_confirmed, delay_until FROM tickers WHERE id = %s", (ticker_id,))
#         entry_confirmed, delay_until = cursor.fetchone()
        
#         if delay_until and datetime.now() < delay_until:
#             return

#         message_text = ""
#         status = ""
#         if not entry_confirmed:
#             if entry_point == 0:
#                 logging.error(f"–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è {ticker_name} —Ä–∞–≤–Ω–∞ –Ω—É–ª—é, –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞...")
#                 return
#             if abs(current_rate - entry_point) / entry_point < 0.015:
#                 markup = types.InlineKeyboardMarkup()
#                 markup.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥", callback_data=f"confirm_entry_{ticker_id}"))
#                 markup.add(types.InlineKeyboardButton("–ó–∞–≥–ª—É—à–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data=f"mute_entry_{ticker_id}"))
#                 message_text = f"üö® {ticker_name} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1.5% –æ—Ç —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞: {entry_point} (—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_rate})."
#                 send_alert(ticker_id, message_text, reply_markup=markup)
#                 return
#             if not entry_confirmed and current_rate == entry_point:
#                 message_text = f"‚úÖ {ticker_name} –¥–æ—Å—Ç–∏–≥ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –Ω–∞ {exchange}.\n"
#                 send_alert(ticker_id, message_text, reply_markup=markup)
#             return
#         if current_rate >= take_profit:
#             message_text = f"üéâ {ticker_name} –Ω–∞ {exchange} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: {take_profit}."
#             status = "–ø—Ä–∏–±—ã–ª—å"
#             send_alert(ticker_id, message_text)
#             db.archive_and_remove_ticker(ticker_id, current_rate, status)
#         elif current_rate <= stop_loss:
#             message_text = f"üõë {ticker_name} –Ω–∞ {exchange} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {stop_loss}."
#             status = "—É–±—ã—Ç–æ–∫"
#             send_alert(ticker_id, message_text)
#             db.archive_and_remove_ticker(ticker_id, current_rate, status)
#     finally:
#         cursor.close()
#         connection.close()

# def check_price_thresholds(ticker_name, exchange, entry_point, take_profit, stop_loss, current_rate, ticker_id):
#     connection = db.get_db_connection()
#     cursor = connection.cursor()
#     try:
#         cursor.execute("SELECT entry_confirmed, delay_until FROM tickers WHERE id = %s", (ticker_id,))
#         entry_confirmed, delay_until = cursor.fetchone()
        
#         if delay_until and datetime.now() < delay_until:
#             return

#         message_text = ""
#         if not entry_confirmed:
#             if entry_point == 0:
#                 logging.error(f"–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è {ticker_name} —Ä–∞–≤–Ω–∞ –Ω—É–ª—é, –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞...")
#                 return
#             if abs(current_rate - entry_point) / entry_point < 0.015:
#                 markup = types.InlineKeyboardMarkup()
#                 markup.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥", callback_data=f"confirm_entry_{ticker_id}"))
#                 markup.add(types.InlineKeyboardButton("–ó–∞–≥–ª—É—à–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data=f"mute_entry_{ticker_id}"))
#                 message_text = f"üö® {ticker_name} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1.5% –æ—Ç —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞: {entry_point} (—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_rate})."
#                 send_alert(ticker_id, message_text, reply_markup=markup)
#                 return
#             if not entry_confirmed and current_rate == entry_point:
#                 message_text = f"‚úÖ {ticker_name} –¥–æ—Å—Ç–∏–≥ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –Ω–∞ {exchange}.\n"
#                 send_alert(ticker_id, message_text, reply_markup=markup)
#             return
#         if current_rate >= take_profit:
#             message_text = f"üéâ {ticker_name} –Ω–∞ {exchange} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: {take_profit}."
#             send_alert(ticker_id, message_text)
#             db.update_ticker_active(ticker_id, False)
#         if current_rate <= stop_loss:
#             message_text = f"üõë {ticker_name} –Ω–∞ {exchange} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {stop_loss}."
#             send_alert(ticker_id, message_text)
#             db.update_ticker_active(ticker_id, False)
#     finally:
#         cursor.close()
#         connection.close()

def send_alert(ticker_id, message_text, reply_markup=None, parse_mode=None):
    if ticker_id in last_alert_time and (datetime.now() - last_alert_time[ticker_id] < timedelta(minutes=5)):
        logging.debug(f"Alert for {ticker_id} suppressed to avoid spam.")
        return

    last_alert_time[ticker_id] = datetime.now()
    chat_id = config.ALARM_CHAT_ID
    try:
        if reply_markup:
            global_bot.send_message(chat_id=chat_id, text=message_text, reply_markup=reply_markup, message_thread_id=config.ALARM_THEME_ID, parse_mode=parse_mode)
        else:
            global_bot.send_message(chat_id=chat_id, text=message_text, message_thread_id=config.ALARM_THEME_ID, parse_mode=parse_mode)
        logging.info(f"Alert sent to {chat_id}: {message_text}")
    except Exception as e:
        logging.error(f"Failed to send alert to {chat_id}: {str(e)}")

# def send_alert(ticker_id, message_text, reply_markup=None):
#     now = datetime.now()
#     if ticker_id in last_alert_time:
#         if now - last_alert_time[ticker_id] < timedelta(minutes=5):
#             logging.debug(f"Alert for {ticker_id} suppressed to avoid spam.")
#             return
#     last_alert_time[ticker_id] = now
#     logging.debug(f"Sending alert for {ticker_id}: {message_text}")
#     chat_id = config.ALARM_CHAT_ID
#     try:
#         if reply_markup:
#             global_bot.send_message(chat_id=chat_id, text=message_text, reply_markup=reply_markup, message_thread_id=config.ALARM_THEME_ID)
#         else:
#             global_bot.send_message(chat_id=chat_id, text=message_text, message_thread_id=config.ALARM_THEME_ID)
#         logging.info(f"Sent alert to {chat_id}: {message_text}")
#     except Exception as e:
#         if "message thread not found" in str(e):
#             logging.error(f"Failed to send alert to {chat_id}: {str(e)}. Check if the thread exists.")
#         elif "group chat was upgraded to a supergroup chat" in str(e):
#             logging.error(f"Failed to send alert to {chat_id}: {str(e)}. The group chat was upgraded to a supergroup chat.")
#         else:
#             logging.error(f"Failed to send alert to {chat_id}: {str(e)}")

def mute_entry(bot, call):
    ticker_id = int(call.data.split('_')[2])
    markup = types.InlineKeyboardMarkup()
    intervals = [("15 –º–∏–Ω—É—Ç", 15), ("30 –º–∏–Ω—É—Ç", 30), ("1 —á–∞—Å", 60), ("4 —á–∞—Å–∞", 240), ("8 —á–∞—Å–æ–≤", 480), ("12 —á–∞—Å–æ–≤", 720)]
    for label, minutes in intervals:
        markup.add(types.InlineKeyboardButton(label, callback_data=f"set_mute_{ticker_id}_{minutes}"))
    bot.send_message(call.message.chat.id, "–ù–∞ —Å–∫–æ–ª—å–∫–æ –∑–∞–≥–ª—É—à–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ?", reply_markup=markup, message_thread_id=config.ALARM_THEME_ID)

def set_mute(bot, call):
    parts = call.data.split('_')
    ticker_id = int(parts[2])
    minutes = int(parts[3])
    delay_until = datetime.now() + timedelta(minutes=minutes)
    connection = db.get_db_connection()
    cursor = connection.cursor()
    try:
        cursor.execute("UPDATE tickers SET delay_until = %s WHERE id = %s", (delay_until, ticker_id))
        connection.commit()
        bot.send_message(call.message.chat.id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–≥–ª—É—à–µ–Ω–æ –Ω–∞ {minutes} –º–∏–Ω—É—Ç.", message_thread_id=config.ALARM_THEME_ID)
    finally:
        cursor.close()
        connection.close()

def set_mute(bot, call):
    parts = call.data.split('_')
    ticker_id = int(parts[2])
    minutes = int(parts[3])
    delay_until = datetime.now() + timedelta(minutes=minutes)
    connection = db.get_db_connection()
    cursor = connection.cursor()
    try:
        cursor.execute("UPDATE tickers SET delay_until = %s WHERE id = %s", (delay_until, ticker_id))
        cursor.execute("SELECT ticker FROM tickers WHERE id = %s", (ticker_id,))
        ticker_name = cursor.fetchone()[0]
        connection.commit()
        bot.send_message(call.message.chat.id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {ticker_name} –∑–∞–≥–ª—É—à–µ–Ω–æ –Ω–∞ {minutes} –º–∏–Ω—É—Ç.", message_thread_id=config.ALARM_THEME_ID)
    finally:
        cursor.close()
        connection.close()


def set_mute(bot, call):
    parts = call.data.split('_')
    ticker_id = int(parts[2])
    minutes = int(parts[3])
    delay_until = datetime.now() + timedelta(minutes=minutes)
    connection = db.get_db_connection()
    cursor = connection.cursor()
    try:
        cursor.execute("UPDATE tickers SET delay_until = %s WHERE id = %s", (delay_until, ticker_id))
        cursor.execute("SELECT ticker FROM tickers WHERE id = %s", (ticker_id,))
        ticker_name = cursor.fetchone()[0]
        connection.commit()
        bot.send_message(call.message.chat.id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {ticker_name} –∑–∞–≥–ª—É—à–µ–Ω–æ –Ω–∞ {minutes} –º–∏–Ω—É—Ç.", message_thread_id=config.ALARM_THEME_ID)
    finally:
        cursor.close()
        connection.close()


def archive_and_delete_ticker(ticker_id):
    connection = db.get_db_connection()
    cursor = connection.cursor()
    try:
        cursor.execute("INSERT INTO archive SELECT * FROM tickers WHERE id = %s", (ticker_id,))
        cursor.execute("DELETE FROM tickers WHERE id = %s", (ticker_id,))
        connection.commit()
    except db.mysql.connector.Error as e:
        logging.error(f"Error during archiving/deleting ticker: {e}")
    finally:
        cursor.close()
        connection.close()

def archive_tickers_list(bot, message):
    connection = db.get_db_connection()
    cursor = connection.cursor()
    try:
        cursor.execute("SELECT id, ticker, status FROM archive")
        tickers = cursor.fetchall()
        markup = types.InlineKeyboardMarkup()
        for id, ticker, status in tickers:
            markup.add(types.InlineKeyboardButton(f"{ticker} - {status}", callback_data=f"archive_{id}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup, message_thread_id=config.ALARM_THEME_ID)
    except db.mysql.connector.Error as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", message_thread_id=config.ALARM_THEME_ID)
    finally:
        cursor.close()
        connection.close()

def show_archive_tickers_list(bot, message):
    connection = db.get_db_connection()
    cursor = connection.cursor()
    try:
        cursor.execute("SELECT id, ticker, status FROM archive")
        tickers = cursor.fetchall()
        if not tickers:
            bot.send_message(ALARM_CHAT_ID, "–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç.", message_thread_id=ALARM_THEME_ID)
            return
        
        markup = types.InlineKeyboardMarkup()
        for id, ticker, status in tickers:
            markup.add(types.InlineKeyboardButton(f"{ticker} - {status}", callback_data=f"archive_{id}"))
        markup.add(types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∞—Ä—Ö–∏–≤", callback_data="clear_all_archive"))
        markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ä", callback_data="selective_delete_trades"))

        bot.send_message(ALARM_CHAT_ID, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup, message_thread_id=ALARM_THEME_ID)
    except mysql.connector.Error as e:
        bot.send_message(ALARM_CHAT_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", message_thread_id=ALARM_THEME_ID)
    finally:
        cursor.close()
        connection.close()

# def show_archive_tickers_list(bot, message):
#     connection = db.get_db_connection()
#     cursor = connection.cursor()
#     try:
#         cursor.execute("SELECT id, ticker, status FROM archive")
#         tickers = cursor.fetchall()
#         markup = types.InlineKeyboardMarkup()
#         for id, ticker, status in tickers:
#             markup.add(types.InlineKeyboardButton(f"{ticker} - {status}", callback_data=f"archive_{id}"))
#         bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup, message_thread_id=config.ALARM_THEME_ID)
#     except mysql.connector.Error as e:
#         bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", message_thread_id=config.ALARM_THEME_ID)
#     finally:
#         cursor.close()
#         connection.close()

# –û—Ç–ª–æ–∂–∏—Ç—å —Å–¥–µ–ª–∫—É
import re

def delay_entry(bot, call):
    ticker_id = int(call.data.split('_')[2])
    msg = bot.send_message(call.message.chat.id, "–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–ª–æ–∂–∏–º –≤—Ö–æ–¥ –≤ —Å–¥–µ–ª–∫—É?\n–ü—Ä–∏–º–µ—Ä—ã: 30 min, 1h, 1 day, 22 –º–∏–Ω—É—Ç—ã", message_thread_id=config.ALARM_THEME_ID)
    bot.register_next_step_handler(msg, lambda message: process_delay_entry(bot, message, ticker_id))

def process_delay_entry(bot, message, ticker_id):
    time_str = message.text.strip().lower()
    
    match = re.match(r'(\d+)\s*(—Å–µ–∫—É–Ω–¥|—Å–µ–∫|s|seconds|second|–º–∏–Ω—É—Ç—ã|–º–∏–Ω|m|minutes|minute|—á–∞—Å—ã|—á–∞—Å|—á|h|hours|hour|–¥–Ω–∏|–¥–µ–Ω—å|–¥|day|days|d)', time_str)
    if not match:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: 30 —Å–µ–∫, 1 –º–∏–Ω, 1 —á–∞—Å, 1 –¥–µ–Ω—å", message_thread_id=config.ALARM_THEME_ID)
        return
    
    delay_value = int(match.group(1))
    delay_unit = match.group(2)

    delay_map = {
        '—Å–µ–∫—É–Ω–¥': 'seconds', '—Å–µ–∫': 'seconds', 's': 'seconds', 'seconds': 'seconds', 'second': 'seconds',
        '–º–∏–Ω—É—Ç—ã': 'minutes', '–º–∏–Ω': 'minutes', 'm': 'minutes', 'minutes': 'minutes', 'minute': 'minutes',
        '—á–∞—Å—ã': 'hours', '—á–∞—Å': 'hours', '—á': 'hours', 'h': 'hours', 'hours': 'hours', 'hour': 'hours',
        '–¥–Ω–∏': 'days', '–¥–µ–Ω—å': 'days', '–¥': 'days', 'day': 'days', 'days': 'days', 'd': 'days'
    }
    
    delay_time = timedelta(**{delay_map[delay_unit]: delay_value})
    delay_until = datetime.now() + delay_time

    connection = db.get_db_connection()
    cursor = connection.cursor()
    try:
        cursor.execute("UPDATE tickers SET delay_until = %s WHERE id = %s", (delay_until, ticker_id))
        connection.commit()
        bot.send_message(message.chat.id, f"–í—Ö–æ–¥ –≤ —Å–¥–µ–ª–∫—É –æ—Ç–ª–æ–∂–µ–Ω –Ω–∞ {delay_value} {delay_unit}.", message_thread_id=config.ALARM_THEME_ID)
        schedule_delay_check(bot, ticker_id, delay_until)
    except mysql.connector.Error as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–æ–∂–µ–Ω–∏–∏ –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É: {e}", message_thread_id=config.ALARM_THEME_ID)
    finally:
        cursor.close()
        connection.close()

def schedule_delay_check(bot, ticker_id, delay_until):
    scheduler = BackgroundScheduler(timezone=pytz.timezone('Europe/Moscow'))
    scheduler.add_job(lambda: delay_check(bot, ticker_id), 'date', run_date=delay_until)
    scheduler.start()

def delay_check(bot, ticker_id):
    connection = db.get_db_connection()
    cursor = connection.cursor()
    try:
        cursor.execute("SELECT ticker, entry_point FROM tickers WHERE id = %s", (ticker_id,))
        ticker = cursor.fetchone()
        if ticker:
            ticker_name, entry_point = ticker
            exchange, current_rate = get_current_price(ticker_name)
            if exchange and current_rate:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥", callback_data=f"confirm_entry_{ticker_id}"))
                markup.add(types.InlineKeyboardButton("–û—Ç–ª–æ–∂–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"delay_entry_{ticker_id}"))
                message_text = f"üö® {ticker_name} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1.5% –æ—Ç —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞: {entry_point} (—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_rate})."
                send_alert(ticker_id, message_text, reply_markup=markup)
    finally:
        cursor.close()
        connection.close()

# –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –∞—Ä—Ö–∏–≤–∞
def delete_all_archive_trades(bot, call):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π –∞—Ä—Ö–∏–≤–∞
    image_paths = db.get_all_archive_image_paths()
    for path in image_paths:
        if path and os.path.exists(path):
            os.remove(path)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∞—Ä—Ö–∏–≤–∞
    db.delete_all_archived_trades()
    bot.answer_callback_query(call.id, "–ê—Ä—Ö–∏–≤ —Å–¥–µ–ª–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω.")
    bot.send_message(ALARM_CHAT_ID, "–í—Å–µ —Å–¥–µ–ª–∫–∏ –∏–∑ –∞—Ä—Ö–∏–≤–∞ —É–¥–∞–ª–µ–Ω—ã.", message_thread_id=ALARM_THEME_ID)
