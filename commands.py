# commands.py
from telebot import types
from db import is_admin, add_admin, remove_admin, get_admins, confirm_entry
from tickers import *
from admin import is_admin
from ROI import calculate_roi
import mysql.connector

# Global variable to track selected trades
selected_trades = set()

def register_handlers(bot):
    @bot.message_handler(commands=['start', 'help'])
    @bot.message_handler(commands=['start', 'help'])
    def send_welcome(message):
        if is_admin(message.from_user.id):
            # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row(types.KeyboardButton("üìà –¢–∏–∫–µ—Ä—ã"), types.KeyboardButton("–ê—Ä—Ö–∏–≤ —Å–¥–µ–ª–æ–∫"), types.KeyboardButton("‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"))
            bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
        else:
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            # markup.row(types.KeyboardButton("üìà –¢–∏–∫–µ—Ä—ã"), types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
            markup.row(types.KeyboardButton("üìà –¢–∏–∫–µ—Ä—ã"), types.KeyboardButton("–ê—Ä—Ö–∏–≤ —Å–¥–µ–ª–æ–∫"), types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
            bot.reply_to(message, """–ü—Ä–∏–≤–µ—Ç!
–Ø Mr. Trader - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Ç–µ–±–µ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–∏–ª—å–æ–Ω—ã —Ç—ã—Å—è—á –∑–µ–ª—ë–Ω—ã—Ö –±—É–º–∞–∂–µ–∫!
–ú–æ–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–∏ –ø—Ä–æ—Å—è—Ç –º–µ–Ω—è –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã, –∞ —è –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å –¥–µ–ª—é—Å—å –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –≤—Å–µ–º —Ç–æ—á–∫–∞–º –≤—Ö–æ–¥–∞ —Å —Ç–æ–±–æ–π!
–£–¥–∞.—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏!""", reply_markup=markup)


    @bot.message_handler(func=lambda message: message.text == "üìà –¢–∏–∫–µ—Ä—ã")
    def ticker_handler(message):
        if is_admin(message.from_user.id):
            manage_tickers(bot, message)  # –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        else:
            manage_tickers(bot, message)  # –¢–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


    @bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    def admin_panel(message):
        # –≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        if not is_admin(message.from_user.id):
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="add_admin"))
        markup.add(types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="remove_admin"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


    @bot.callback_query_handler(func=lambda call: call.data == "add_admin")
    def prompt_new_admin(call):
        bot.answer_callback_query(call.id)
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_add_admin"))
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=markup)
        bot.register_next_step_handler(msg, lambda message: process_add_admin(message, bot))

    @bot.callback_query_handler(func=lambda call: call.data == "cancel_add_admin")
    def cancel_add_admin(call):
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    @bot.callback_query_handler(func=lambda call: call.data == "remove_admin")
    def prompt_remove_admin(call):
        bot.answer_callback_query(call.id)
        admins = get_admins()
        if not admins:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        markup = types.InlineKeyboardMarkup()
        for admin_id in admins:
            markup.add(types.InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å {admin_id}", callback_data=f"del_admin_{admin_id}"))
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("del_admin_"))
    def confirm_remove_admin(call):
        bot.answer_callback_query(call.id)
        admin_id = int(call.data.split("_")[2])
        remove_admin(admin_id)
        bot.send_message(call.message.chat.id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} —É–¥–∞–ª–µ–Ω.")

    """ TICKERS """
    @bot.message_handler(func=lambda message: message.text == "üìà –¢–∏–∫–µ—Ä—ã")
    def ticker_handler(message):
        if is_admin(message.from_user.id):
            manage_tickers(bot, message)
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞–º–∏.")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞
    @bot.callback_query_handler(func=lambda call: call.data == 'add_ticker')
    def handle_add_ticker(call):
        initiate_add_ticker(bot, call)
    
    # –í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
    @bot.callback_query_handler(func=lambda call: 'direction' in call.data)
    def handle_direction_selection(call):
        process_direction(bot, call)

#   # –í—ã–±–æ—Ä –±–∏—Ä–∂–∏ –¥–ª—è –∫—É—Ä—Å–∞
    @bot.callback_query_handler(func=lambda call: 'exchange' in call.data)
    def handle_exchange_selection_h(call):
        handle_exchange_selection(bot, call)
    
    @bot.callback_query_handler(func=lambda call: call.data == "show_tickers")
    def handle_show_tickers(call):
        show_ticker_list(bot, call.message)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤
    @bot.callback_query_handler(func=lambda call: call.data.startswith("ticker_"))
    def handle_ticker_selection(call):
        show_ticker_info(bot, call)
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–∫–µ—Ä–∞—Ö
    @bot.message_handler(commands=['tickers'], func=lambda message: message.text == "–°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤")
    def handle_tickers_command(message):
        show_ticker_list(bot, message)


    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞
    @bot.callback_query_handler(func=lambda call: call.data == "delete_ticker")
    def handle_delete_ticker(call):
        delete_ticker(bot, call)
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("del_"))
    def handle_confirm_delete_ticker(call):
        confirm_delete_ticker(bot, call)

     # –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞
    @bot.callback_query_handler(func=lambda call: call.data == "cancel_add_ticker")
    def cancel_add_ticker(call):
        bot.answer_callback_query(call.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        bot.edit_message_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)

    # –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞
    @bot.callback_query_handler(func=lambda call: call.data == "cancel_delete")
    def handle_cancel_delete(bot, call):
        bot.answer_callback_query(call.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        bot.edit_message_text("–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    @bot.callback_query_handler(func=lambda call: call.data == "edit_ticker")
    def handle_edit_ticker(call):
        edit_ticker(bot, call)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    @bot.callback_query_handler(func=lambda call: call.data.startswith("edit_") and not call.data.startswith("editfield_"))
    def handle_edit_selection(call):
        select_field_to_edit(bot, call)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è
    @bot.callback_query_handler(func=lambda call: call.data.startswith("editfield_"))
    def handle_field_edit(call):
        get_new_value(bot, call)
    
    # –û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞
    @bot.callback_query_handler(func=lambda call: call.data == "cancel_edit")
    def handle_cancel_edit(call):
        bot.answer_callback_query(call.id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        bot.send_message(call.message.chat.id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        manage_tickers(bot, call.message)
    
    # Tickers monitoring
    @bot.message_handler(commands=['show_tickers'])
    def send_tickers_list(message):
        show_ticker_list(bot, message)

    @bot.message_handler(commands=['chat_id'])
    def print_chat_id(message):
        print("\n\nChat ID:\n\n", message.chat.id)
        bot.reply_to(message, f"Chat ID: {message.chat.id}")

    @bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    def ticker_handler(message):
        if is_admin(message.from_user.id):
            bot.send_message(message.chat.id, "–î—É—Ä–∏–∫, —Ç—ã –∏ —Ç–∞–∫ –≤—Å—ë –∑–Ω–∞–µ—à—å =)")
        else:
            bot.send_message(message.chat.id, "–ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–≤—Ç–æ—Ä–æ–º –±–æ—Ç–∞: @Itdobro")
    
    # –í—Ö–æ–¥ –≤ —Å–¥–µ–ª–∫—É
    @bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_entry_"))
    def confirm_entry_handler(call):
        ticker_id = int(call.data.split('_')[2])
        confirm_entry(ticker_id)
        bot.answer_callback_query(call.id, "–í—Ö–æ–¥ –≤ —Å–¥–µ–ª–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
        bot.send_message(call.message.chat.id, "–í—Ö–æ–¥ –≤ —Å–¥–µ–ª–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ë—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–µ –∏–ª–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–µ.")

    # @bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_entry_"))
    # def confirm_entry_handler(call):
    #     ticker_id = int(call.data.split('_')[2])
    #     db.confirm_entry(ticker_id)
    #     bot.answer_callback_query(call.id, "–í—Ö–æ–¥ –≤ —Å–¥–µ–ª–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
    #     bot.send_message(call.message.chat.id, "–í—Ö–æ–¥ –≤ —Å–¥–µ–ª–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ë—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–µ –∏–ª–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–µ.")

    # @bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_entry_"))
    # def confirm_entry(call):
    #     ticker_id = int(call.data.split('_')[2])
    #     db.confirm_entry(ticker_id)
    #     bot.answer_callback_query(call.id, "–í—Ö–æ–¥ –≤ —Å–¥–µ–ª–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ —Ç–æ—á–∫–µ –≤—Ö–æ–¥–∞ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.")

    # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    @bot.callback_query_handler(func=lambda call: call.data == "active_trades")
    def show_active_trades(call):
        active_trades = db.get_active_trades()
        if not active_trades:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.")
            return

        markup = types.InlineKeyboardMarkup()
        for trade in active_trades:
            button_text = f"{trade['ticker']} - {trade['direction']}"
            callback_data = f"trade_info_{trade['id']}"
            markup.add(types.InlineKeyboardButton(text=button_text, callback_data=callback_data))

        bot.send_message(call.message.chat.id, "–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏:", reply_markup=markup)

    # –î–µ—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏
    @bot.callback_query_handler(func=lambda call: call.data.startswith("trade_info_"))
    def trade_info(call):
        trade_id = int(call.data.split('_')[2])
        trade = db.get_trade_details(trade_id)
        if trade:
            if trade['setup_image_path'] and os.path.exists(trade['setup_image_path']):
                with open(trade['setup_image_path'], 'rb') as photo:
                    bot.send_photo(call.message.chat.id, photo)
            else:
                bot.send_message(call.message.chat.id, "–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–µ—Ç–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

            info = (f"<b>–¢–∏–∫–µ—Ä:</b> {trade['ticker']}\n"
                    f"<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {trade['direction']}\n"
                    f"<b>–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞:</b> {trade['entry_point']}\n"
                    f"<b>–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:</b> {trade['take_profit']}\n"
                    f"<b>–°—Ç–æ–ø-–ª–æ—Å—Å:</b> {trade['stop_loss']}\n"
                    f"<b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</b> {trade['current_rate']}\n"
                    f"<b>–°—Ç–∞—Ç—É—Å:</b> {'–ê–∫—Ç–∏–≤–Ω–∞' if trade['active'] else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}")
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ —Å–¥–µ–ª–∫–∏", callback_data=f"cancel_trade_{trade['id']}"))
            bot.send_message(call.message.chat.id, info, parse_mode='HTML', reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, "–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    # –û—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏ (–∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö)
    @bot.callback_query_handler(func=lambda call: call.data.startswith("cancel_trade_"))
    def cancel_trade(call):
        trade_id = int(call.data.split('_')[2])
        db.cancel_trade(trade_id)
        bot.answer_callback_query(call.id, "–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        bot.edit_message_text("–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.", call.message.chat.id, call.message.message_id)

    """ –ê–†–•–ò–í –°–î–ï–õ–û–ö """
    @bot.message_handler(func=lambda message: message.text == "–ê—Ä—Ö–∏–≤ —Å–¥–µ–ª–æ–∫")
    def handle_archive_button(message):
        show_archive_tickers_list(bot, message)

    @bot.callback_query_handler(func=lambda call: call.data == "show_archive")
    def show_archive(call):
        bot.answer_callback_query(call.id)
        archive_tickers_list(bot, call.message)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("archive_"))
    def show_archive_details(call):
        parts = call.data.split('_')
        if len(parts) < 3 or not parts[2].isdigit():
            bot.send_message(call.message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
            return

        ticker_id = int(parts[2])
        connection = db.get_db_connection()
        cursor = connection.cursor()
        try:
            cursor.execute("SELECT * FROM archive WHERE id = %s", (ticker_id,))
            ticker = cursor.fetchone()
            if ticker:
                info = (
                    f"<b>–¢–∏–∫–µ—Ä:</b> {ticker[1]}\n"
                    f"<b>–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞:</b> {ticker[2]}\n"
                    f"<b>–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:</b> {ticker[3]}\n"
                    f"<b>–°—Ç–æ–ø-–ª–æ—Å—Å:</b> {ticker[4]}\n"
                    f"<b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</b> {ticker[5]}\n"
                    f"<b>–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è:</b> {ticker[8].strftime('%Y-%m-%d %H:%M:%S')}\n"
                    f"<b>–°—Ç–∞—Ç—É—Å:</b> {ticker[9]}"
                )
                bot.send_message(call.message.chat.id, info, parse_mode='HTML')
                if ticker[6] and os.path.exists(ticker[6]):
                    with open(ticker[6], 'rb') as photo:
                        bot.send_photo(call.message.chat.id, photo)
            else:
                bot.send_message(call.message.chat.id, "–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except Exception as e:
            bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞: {e}")
        finally:
            cursor.close()
            connection.close()

    # –û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞
    @bot.callback_query_handler(func=lambda call: call.data == "clear_all_archive")
    def confirm_clear_all_archive(call):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_clear_all"),
                types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_clear_all"))
        bot.send_message(call.message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∞—Ä—Ö–∏–≤ —Å–¥–µ–ª–æ–∫?", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data == "confirm_clear_all")
    def clear_all_archive(call):
        db.delete_all_archived_trades()
        bot.answer_callback_query(call.id, "–ê—Ä—Ö–∏–≤ —Å–¥–µ–ª–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω.")
        bot.edit_message_text("–í—Å–µ —Å–¥–µ–ª–∫–∏ –∏–∑ –∞—Ä—Ö–∏–≤–∞ —É–¥–∞–ª–µ–Ω—ã.", call.message.chat.id, call.message.message_id)

    @bot.callback_query_handler(func=lambda call: call.data == "cancel_clear_all")
    def cancel_clear_all(call):
        bot.answer_callback_query(call.id, "–û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        bot.edit_message_text("–û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞ —Å–¥–µ–ª–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω–∞.", call.message.chat.id, call.message.message_id)

    # –£–¥–∞–ª–∏—Ç—å —Å–¥–µ–ª–∫—É –∏–∑ –∞—Ä—Ö–∏–≤–∞
    @bot.callback_query_handler(func=lambda call: call.data.startswith("delete_archive_"))
    def delete_selected_archived(call):
        trade_id = int(call.data.split('_')[2])
        db.delete_archived_trade(trade_id)
        bot.answer_callback_query(call.id, "–ê—Ä—Ö–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
        bot.edit_message_text("–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞.", call.message.chat.id, call.message.message_id)

    # –ø—É–Ω–∫—Ç—ã –∞—Ä—Ö–∏–≤–∞
    @bot.callback_query_handler(func=lambda call: call.data == "show_archive_options")
    def show_archive_tickers_list(bot, message):
        connection = db.get_db_connection()
        cursor = connection.cursor()
        try:
            cursor.execute("SELECT id, ticker, status FROM archive")
            tickers = cursor.fetchall()
            markup = types.InlineKeyboardMarkup()
            markup.row(types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∞—Ä—Ö–∏–≤", callback_data="clear_all_archive"))
            markup.row(types.InlineKeyboardButton("–í—ã–±–æ—Ä–æ—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫", callback_data="selective_delete_trades"))
            for id, ticker, status in tickers:
                markup.add(types.InlineKeyboardButton(f"{ticker} - {status}", callback_data=f"archive_select_{id}"))
            bot.send_message(message.chat.id, "–ê—Ä—Ö–∏–≤ —Å–¥–µ–ª–æ–∫:", reply_markup=markup)
        except mysql.connector.Error as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        finally:
            cursor.close()
            connection.close()

    # –í—ã–±–æ—Ä —Å–¥–µ–ª–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∞—Ä—Ö–∏–≤–∞
    @bot.callback_query_handler(func=lambda call: call.data.startswith("archive_select_"))
    def select_trade_for_deletion(call):
        trade_id = call.data.split('_')[2]
        if trade_id in selected_trades:
            selected_trades.remove(trade_id)
            bot.answer_callback_query(call.id, "–°–¥–µ–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ.")
        else:
            selected_trades.add(trade_id)
            bot.answer_callback_query(call.id, "–°–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ.")
        update_selected_trades_message(bot, call.message.chat.id)

    def update_selected_trades_message(bot, chat_id):
        if selected_trades:
            selected_info = "–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: " + ', '.join(selected_trades)
        else:
            selected_info = "–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫."
        bot.send_message(chat_id, selected_info)

    @bot.callback_query_handler(func=lambda call: call.data == "selective_delete_trades")
    def show_archive_tickers_list_for_deletion(call):
        connection = db.get_db_connection()
        cursor = connection.cursor()
        try:
            cursor.execute("SELECT id, ticker, status FROM archive")
            tickers = cursor.fetchall()
            if not tickers:
                bot.send_message(call.message.chat.id, "–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç.")
                return
            markup = types.InlineKeyboardMarkup()
            for id, ticker, status in tickers:
                # Ensure deletion functionality is distinct
                markup.add(types.InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {ticker} - {status}", callback_data=f"delete_archive_{id}"))
            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        except mysql.connector.Error as e:
            bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        finally:
            cursor.close()
            connection.close()

    @bot.callback_query_handler(func=lambda call: call.data == "confirm_delete_selected")
    def delete_selected_trades(call):
        for trade_id in selected_trades:
            db.delete_archived_trade(trade_id)
        selected_trades.clear()  # Clear after deletion
        bot.answer_callback_query(call.id, "–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ —É–¥–∞–ª–µ–Ω—ã.")
        bot.edit_message_text("–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∞—Ä—Ö–∏–≤–∞.", call.message.chat.id, call.message.message_id)

    @bot.callback_query_handler(func=lambda call: call.data == "cancel_delete_selected")
    def cancel_delete_selected(call):
        selected_trades.clear()
        bot.answer_callback_query(call.id, "–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        bot.edit_message_text("–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)

### =============================================================================

def process_add_admin(message, bot):
    try:
        user_id = int(message.text)
        add_admin(user_id)
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
    except ValueError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")


def process_remove_admin(message, bot):
    try:
        user_id = int(message.text)
        remove_admin(user_id)
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    except ValueError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —ç—Ç–æ—Ç –±–æ–≥")
