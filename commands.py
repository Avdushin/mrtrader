# commands.py
from telebot import types
from db import is_admin, add_admin, remove_admin, get_admins, add_new_ticker
# import tickers
from tickers import *
# from tickers import manage_tickers, initiate_add_ticker, handle_action

user_state = {}


def register_handlers(bot):
    @bot.message_handler(commands=['start', 'help'])
    def send_welcome(message):
        if is_admin(message.from_user.id):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row(types.KeyboardButton("üìà –¢–∏–∫–µ—Ä—ã"), types.KeyboardButton("‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"))
            bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
        else:
            simple_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            simple_markup.row(types.KeyboardButton("üìà –¢–∏–∫–µ—Ä—ã"), types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
            bot.reply_to(message, """–ü—Ä–∏–≤–µ—Ç!
–Ø Mr. Trader - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Ç–µ–±–µ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–∏–ª—å–æ–Ω—ã —Ç—ã—Å—è—á –∑–µ–ª—ë–Ω—ã—Ö –±—É–º–∞–∂–µ–∫!
–ú–æ–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–∏ –ø—Ä–æ—Å—è—Ç –º–µ–Ω—è –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã, –∞ —è –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å –¥–µ–ª—é—Å—å –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –≤—Å–µ–º —Ç–æ—á–∫–∞–º –≤—Ö–æ–¥–∞ —Å —Ç–æ–±–æ–π!
–£–¥–∞.—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏!""", reply_markup=simple_markup)

    @bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    def admin_panel(message):
        # –≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        if not is_admin(message.from_user.id):
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="add_admin"))
        markup.add(types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="remove_admin"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


    @bot.callback_query_handler(func=lambda call: call.data == "add_admin")
    def prompt_new_admin(call):
        bot.answer_callback_query(call.id)
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_add_admin"))
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=markup)
        bot.register_next_step_handler(msg, lambda message: process_add_admin(message, bot))

    @bot.callback_query_handler(func=lambda call: call.data == "cancel_add_admin")
    def cancel_add_admin(call):
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    @bot.callback_query_handler(func=lambda call: call.data == "remove_admin")
    def prompt_remove_admin(call):
        bot.answer_callback_query(call.id)
        admins = get_admins()
        if not admins:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        markup = types.InlineKeyboardMarkup()
        for admin_id in admins:
            markup.add(types.InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å {admin_id}", callback_data=f"del_admin_{admin_id}"))
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("del_admin_"))
    def confirm_remove_admin(call):
        bot.answer_callback_query(call.id)
        admin_id = int(call.data.split("_")[2])
        remove_admin(admin_id)
        bot.send_message(call.message.chat.id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} —É–¥–∞–ª–µ–Ω.")

    @bot.message_handler(func=lambda message: message.text == "üìà –¢–∏–∫–µ—Ä—ã")
    def ticker_handler(message):
        if is_admin(message.from_user.id):
            manage_tickers(bot, message)  # –£–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥—É–ª—å –ø–µ—Ä–µ–¥ —Ñ—É–Ω–∫—Ü–∏–µ–π
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞–º–∏.")

    @bot.callback_query_handler(func=lambda call: call.data == 'add_ticker')
    def handle_add_ticker(call):
        initiate_add_ticker(bot, call)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('direction_'))
    def handle_direction_selection(call):
        # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback_query
        direction = call.data.split('_')[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (LONG –∏–ª–∏ SHORT)
        user_state[call.message.chat.id]['direction'] = direction  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.answer_callback_query(call.id, "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ: " + direction)
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å:")  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    
    def prompt_for_direction(message):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("Long", callback_data="direction_LONG"),
                types.InlineKeyboardButton("Short", callback_data="direction_SHORT"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏:", reply_markup=markup)

    # @bot.callback_query_handler(func=lambda call: call.data.startswith('direction_'))
    # def handle_direction_selection(call):
    #     direction = call.data.split('_')[1]  # direction_long –∏–ª–∏ direction_short
    #     user_state[call.message.chat.id]['direction'] = direction.upper()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ 'LONG' –∏–ª–∏ 'SHORT'
    #     bot.answer_callback_query(call.id, "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ: " + direction.upper())


    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–∏—Ä–∂–∏
    # @bot.callback_query_handler(func=lambda call: call.data.startswith('exchange_'))
    # def exchange_callback(call):
    #     handle_exchange_selection(bot, call)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–∏—Ä–∂–∏
    @bot.callback_query_handler(func=lambda call: call.data.startswith('exchange_'))
    def exchange_callback(call):
        handle_exchange_selection(bot, call)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('change_exchange_'))
    def change_exchange_callback(call):
        # –û—à–∏–±–∫–∞ –±—ã–ª–∞ –∑–¥–µ—Å—å: –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–ª—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä 'call' –≤ —Ñ—É–Ω–∫—Ü–∏—é.
        _, ticker_name = call.data.split('_')[1:]  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π split, –µ—Å–ª–∏ 'change_exchange_' —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—á–∞–ª–æ–º —Å—Ç—Ä–æ–∫–∏
        ask_for_exchange(bot, call.message, ticker_name)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    @bot.callback_query_handler(func=lambda call: call.data.startswith('skip_setup'))
    def handle_skip_setup(call):
        parts = call.data.split('_')
        if len(parts) >= 4:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ticker_name –∏ exchange, –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ current_rate
            ticker_name = parts[2]
            exchange = parts[3]
            current_rate = '_'.join(parts[4:])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ü–µ–Ω—É
            bot.answer_callback_query(call.id, "–®–∞–≥ –ø—Ä–æ–ø—É—â–µ–Ω.")
            bot.send_message(call.message.chat.id, f"–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —ç—Ç–∞–ø –≤–≤–æ–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ—Ç–∞–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –¥–ª—è {ticker_name} –Ω–∞ –±–∏—Ä–∂–µ {exchange}.")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
            user_state[call.message.chat.id] = {"ticker_name": ticker_name, "exchange": exchange, "current_rate": current_rate}
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞
            bot.register_next_step_handler_by_chat_id(call.message.chat.id, handle_entry_point)
        else:
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")


    def handle_entry_point(message):
        user_data = user_state.get(message.chat.id, {})
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
            entry_point = float(message.text)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –≤ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data['entry_point'] = entry_point
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:")
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
            bot.register_next_step_handler(message, handle_take_profit)
        except ValueError:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –∑–∞–Ω–æ–≤–æ
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞.")

    def handle_take_profit(message):
        user_data = user_state.get(message.chat.id, {})
        try:
            take_profit = float(message.text)
            user_data['take_profit'] = take_profit

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("Long", callback_data="direction_LONG"),
                types.InlineKeyboardButton("Short", callback_data="direction_SHORT")
            )
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏:", reply_markup=markup)
            
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            bot.register_next_step_handler(message, handle_direction_selection)
        except ValueError:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç.")

    def handle_stop_loss(message):
        user_data = user_state.get(message.chat.id, {})
        if not user_data:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        try:
            stop_loss = float(message.text)
            user_data['stop_loss'] = stop_loss

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            direction = user_data.get('direction', 'LONG')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 'LONG' –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ

            # –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            add_new_ticker(
                ticker_name=user_data['ticker_name'],
                entry_point=user_data['entry_point'],
                take_profit=user_data['take_profit'],
                stop_loss=user_data['stop_loss'],
                current_rate=user_data['current_rate'],
                setup_image_path=user_data.get('setup_image_path', "–ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"),
                direction=direction
            )

            bot.send_message(message.chat.id, f"–ó–∞–ø–∏—Å–∞–Ω–∞ —Å–¥–µ–ª–∫–∞: –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ - {user_data['entry_point']}, –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç - {user_data['take_profit']}, –°—Ç–æ–ø-–ª–æ—Å—Å - {user_data['stop_loss']}, –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - {direction}")
        except ValueError:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å.")

    # def handle_entry_point(message):
    #     user_data = user_state.get(message.chat.id, {})
    #     try:
    #         entry_point = float(message.text)
    #         bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:")
    #         # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
    #         user_data['entry_point'] = entry_point
    #         # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    #         bot.register_next_step_handler(message, handle_take_profit)
    #     except ValueError:
    #         bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞.")


    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    @bot.message_handler(func=lambda message: True)  # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ
    def handle_text_after_image_request(message):
        if message.chat.id in user_state and 'ticker_name' in user_state[message.chat.id]:
            process_entry_point(message, user_state[message.chat.id]['ticker_name'], user_state[message.chat.id]['exchange'], user_state[message.chat.id]['current_rate'])
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤ –∏–ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            pass

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    # @bot.message_handler(func=lambda message: True)  # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ
    # def handle_text_after_image_request(message):
    #     # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    #     process_setup_image(bot, message, cached_ticker_name, cached_exchange, cached_current_rate)

    @bot.callback_query_handler(func=lambda call: call.data == 'new_ticker')
    def new_ticker_callback(bot, call):
        initiate_add_ticker(bot, call)
    
    @bot.callback_query_handler(func=lambda call: call.data == 'skip')
    def handle_skip(call):
        bot.answer_callback_query(call.id, "–®–∞–≥ –ø—Ä–æ–ø—É—â–µ–Ω.")
        bot.send_message(call.message.chat.id, "–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —ç—Ç–∞–ø –≤–≤–æ–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ—Ç–∞–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ.")

    # –ü—Ä–∏–º–µ—Ä –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞, –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    @bot.callback_query_handler(func=lambda call: call.data.startswith('setup_'))
    def process_setup(call):
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ setup_data —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ –Ω—É–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        _, ticker_name, exchange = call.data.split('_')[1:]
        bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –¥–ª—è {ticker_name} –Ω–∞ –±–∏—Ä–∂–µ {exchange}.")


    @bot.callback_query_handler(func=lambda call: call.data == 'cancel')
    def handle_cancel(call):
        bot.answer_callback_query(call.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        bot.send_message(call.message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–æ–º.")
    


### =============================================================================

def process_add_admin(message, bot):
    try:
        user_id = int(message.text)
        add_admin(user_id)
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
    except ValueError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")


def process_remove_admin(message, bot):
    try:
        user_id = int(message.text)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤–≤–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        remove_admin(user_id)
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    except ValueError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —ç—Ç–æ—Ç –±–æ–≥")
